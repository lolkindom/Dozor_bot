import logging
from Find_word import find_word
from aiogram import Bot, Dispatcher, executor, types
import requests
import re

API_TOKEN = '987969357:AAEA8ZYoFtboEh9FfLRe2xiUNb2WCifziII'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –±–æ—Ç–∏–∫ –∏ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\n–Ø —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã\n–ù–æ—á–Ω–æ–≥–æ –ü–æ–∑–æ—Ä–∞ 1.0\n–ü–æ–º–æ–≥—É –≤ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±—É–∫–≤—ã "
                        "–∑–∞–∫—Ä—ã–≤–∞–µ–º ?\n–ù–µ –∑–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—É–∫–≤ - —Å—Ç–∞–≤–∏–º *\n–ø—Ä–∏–º–µ—Ä—ã:\n–°??–ê–ö? = "
                        "–°–æ–±–ê–ö–∞\n*–ë–ê–ö* = —Å–æ–ë–ê–ö–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    with open('cat.jpg', 'rb') as photo:
        '''
        # Old fashioned way:
        await bot.send_photo(
            message.chat.id,
            photo,
            caption='Cats are here üò∫',
            reply_to_message_id=message.message_id,
        )
        '''

        await message.reply_photo(photo, caption='Cats are here üò∫')


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)

    # await message.answer(message.text)
    ideal = r'\w+'
    msg = message.text
    msg = msg.replace('*', '%')
    msg = msg.replace('?', '*')
    if len(re.findall(ideal, msg)) > 0:
        if len(find_word(msg)) > 0:
            try:
                await message.answer(find_word(msg))
            except:
                await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å')
        else:
            await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ =(')
    else:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n'
                            '–ø—Ä–∏–º–µ—Ä—ã:\n–°??–ê–ö? = '
                            '–°–æ–±–ê–ö–∞\n*–ë–ê–ö* = —Å–æ–ë–ê–ö–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
